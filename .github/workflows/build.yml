name: Build
on: [push]

jobs:
  Linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - GOARCH: amd64
            GOOS: linux
            LIBPATH: x86_64-linux-gnu

    steps:
      - name: Set up Go 1.15
        uses: actions/setup-go@v2
        with:
          go-version: 1.15
        id: go

      - run: go version && go env

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Build Go executables
        run: |
          sudo apt-get update -y
          sudo apt-get install -y pkg-config
          mkdir -p ${{ matrix.GOOS }}-${{ matrix.GOARCH }}
          make
          cp $PWD/output/bass/lib/${{ matrix.GOOS }}/${{ matrix.GOARCH }}/libbass.so $PWD/${{ matrix.GOOS }}-${{ matrix.GOARCH }}/
          cp $PWD/output/bass/lib/${{ matrix.GOOS }}/${{ matrix.GOARCH }}/plugins/*.so $PWD/${{ matrix.GOOS }}-${{ matrix.GOARCH }}/
          cp $PWD/cmd/hannah/hannah $PWD/${{ matrix.GOOS }}-${{ matrix.GOARCH }}/
          cp $PWD/cmd/reverseProxy/rp $PWD/${{ matrix.GOOS }}-${{ matrix.GOARCH }}/

      - name: package Chrome extension
        run: |
          cd browser/chrome
          zip ../../${{ matrix.GOOS }}-${{ matrix.GOARCH }}/hannah.crx ./*
          cd ../..

      - name: package Firefox extension
        run: |
          cd browser/firefox
          zip ../../${{ matrix.GOOS }}-${{ matrix.GOARCH }}/hannah.xpi ./*
          cd ../..

      - name: Upload artifact hannah-${{ matrix.GOOS }}-${{ matrix.GOARCH }}
        uses: actions/upload-artifact@v1.0.0
        with:
          name: hannah-${{ matrix.GOOS }}-${{ matrix.GOARCH }}
          path: ${{ matrix.GOOS }}-${{ matrix.GOARCH }}

  Windows:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - mingw_arch: MINGW64
            mingw_prefix: mingw-w64-x86_64
            GOARCH: amd64
            GOOS: windows
            CC: x86_64-w64-mingw32-gcc
            CXX: x86_64-w64-mingw32-g++
            LD: x86_64-w64-mingw32-ld
            TOOLCHAIN: g++-mingw-w64-x86-64

    steps:
      - name: prepare MinGW
        run: |
          sudo apt-get update -qq ;
          sudo apt-get install -qq ${{ matrix.TOOLCHAIN }} ;

      - name: Set up Go 1.15
        uses: actions/setup-go@v2
        with:
          go-version: 1.15
        id: go

      - run: go version && go env

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Build
        run: |
          cd $PWD/cmd/hannah
          env CGO_ENABLED=1 GOARCH=${{ matrix.GOARCH }} GOOS=${{ matrix.GOOS }} CC=${{ matrix.CC }} CXX=${{ matrix.CXX }} LD=${{ matrix.LD }} go build -ldflags="-s -w" -o $PWD/../../${{ matrix.mingw_prefix }}/hannah.exe
          cd $PWD/../..
          cp $PWD/output/bass/lib/${{ matrix.GOOS }}/${{ matrix.GOARCH }}/bass.dll $PWD/${{ matrix.mingw_prefix }}/
          cp $PWD/output/bass/lib/${{ matrix.GOOS }}/${{ matrix.GOARCH }}/plugins/*.dll $PWD/${{ matrix.mingw_prefix }}/
          cd $PWD/cmd/reverseProxy
          env CGO_ENABLED=1 GOARCH=${{ matrix.GOARCH }} GOOS=${{ matrix.GOOS }} CC=${{ matrix.CC }} CXX=${{ matrix.CXX }} LD=${{ matrix.LD }} go build -ldflags="-s -w" -o $PWD/../../${{ matrix.mingw_prefix }}/rp.exe

      - name: Upload artifact hannah-${{ matrix.mingw_prefix }}
        uses: actions/upload-artifact@v1.0.0
        with:
          name: hannah-${{ matrix.mingw_prefix }}
          path: ${{ matrix.mingw_prefix }}

  Darwin:
    runs-on: macos-latest
    strategy:
      matrix:
        qt_ver: [5.15.1]
        qt_target: [desktop]
        qt_arch: [clang_64]
    steps:
      - name: Set up Go 1.15
        uses: actions/setup-go@v2
        with:
          go-version: 1.15
        id: go

      - run: go version && go env

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Build Go executables
        run: |
          brew install pkg-config
          make
          install_name_tool -change @executable_path/../../output/bass/lib/darwin/amd64/libbass.dylib @executable_path/libbass.dylib cmd/hannah/hannah
          mkdir darwin-amd64
          mv $PWD/cmd/hannah/hannah darwin-amd64/
          cp $PWD/output/bass/lib/darwin/amd64/libbass.dylib darwin-amd64/
          cp $PWD/output/bass/lib/darwin/amd64/plugins/*.dylib darwin-amd64/
          mv $PWD/cmd/reverseProxy/rp darwin-amd64/

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.qt_ver }}
          target: ${{ matrix.qt_target }}
          arch: ${{ matrix.qt_arch }}

      - name: build macos
        run: |
          cd desktop
          mkdir build
          cd build
          qmake -r CONFIG+=release CONFIG+=qtquickcompiler ..
          make -j 2
          cd ..
      
      - name: package desktop
        run: |
          macdeployqt "desktop/build/Hannah.app" -qmldir=. -verbose=1 -dmg
          cp desktop/build/Hannah.dmg darwin-amd64/

      - name: package Chrome extension
        run: |
          cd browser/chrome
          zip ../../darwin-amd64/hannah.crx ./*
          cd ../..

      - name: package Firefox extension
        run: |
          cd browser/firefox
          zip ../../darwin-amd64/hannah.xpi ./*
          cd ../..

      - name: Upload artifact hannah-darwin-amd64
        uses: actions/upload-artifact@v1.0.0
        with:
          name: hannah-darwin-amd64
          path: darwin-amd64
