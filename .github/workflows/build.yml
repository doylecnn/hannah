name: Build
on: [push]

jobs:
  Linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - GOARCH: amd64
            GOOS: linux
            LIBPATH: x86_64-linux-gnu

    steps:
      - name: Set up Go 1.15
        uses: actions/setup-go@v2
        with:
          go-version: 1.15
        id: go

      - run: go version && go env

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Build Go executables
        run: |
          sudo apt-get update -y
          sudo apt-get install -y pkg-config
          mkdir -p ${{ matrix.GOOS }}-${{ matrix.GOARCH }}
          make
          cp $PWD/output/bass/lib/${{ matrix.GOOS }}/${{ matrix.GOARCH }}/libbass.so $PWD/${{ matrix.GOOS }}-${{ matrix.GOARCH }}/
          cp $PWD/output/bass/lib/${{ matrix.GOOS }}/${{ matrix.GOARCH }}/plugins/*.so $PWD/${{ matrix.GOOS }}-${{ matrix.GOARCH }}/
          cp $PWD/cmd/hannah/hannah $PWD/${{ matrix.GOOS }}-${{ matrix.GOARCH }}/
          cp $PWD/cmd/reverseProxy/rp $PWD/${{ matrix.GOOS }}-${{ matrix.GOARCH }}/

      - name: package Chrome extension
        run: |
          cd browser/chrome
          zip ../../${{ matrix.GOOS }}-${{ matrix.GOARCH }}/hannah.crx ./*
          cd ../..

      - name: package Firefox extension
        run: |
          cd browser/firefox
          zip ../../${{ matrix.GOOS }}-${{ matrix.GOARCH }}/hannah.xpi ./*
          cd ../..

      - name: Upload artifact hannah-${{ matrix.GOOS }}-${{ matrix.GOARCH }}
        uses: actions/upload-artifact@v1.0.0
        with:
          name: hannah-${{ matrix.GOOS }}-${{ matrix.GOARCH }}
          path: ${{ matrix.GOOS }}-${{ matrix.GOARCH }}

  Windows-MSVC: 
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - qt_arch: win64_msvc2019_64
            mingw_arch: MINGW64 
            mingw_prefix: mingw-w64-x86_64
            toolchains: gcc
            GOARCH: amd64
            BUILDRP: build-x64.bat
            msvc_arch: x64
          - qt_arch: win32_msvc2019
            mingw_arch: MINGW32
            mingw_prefix: mingw-w64-i686
            toolchains: gcc
            GOARCH: 386
            BUILDRP: build-x86.bat
            msvc_arch: x86
    env:
      go_version: 1.15.7
      qt_ver: 5.15.2
      qt_target: desktop
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: ${{ matrix.mingw_arch }}
          install: zip make git ${{ matrix.mingw_prefix }}-${{ matrix.toolchains }} ${{ matrix.mingw_prefix }}-make ${{ matrix.mingw_prefix }}-zstd

      - name: Set up Go 1.15
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.go_version }}
        id: go

      - run: go version && go env

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          ref: ${{ github.head_ref }}

      - name: Build Go executables
        shell: msys2 {0}
        run: |
          env GOARCH=${{ matrix.GOARCH }} PATH=$PATH:/${{ matrix.mingw_arch }}/bin:/C/hostedtoolcache/windows/go/${{ env.go_version }}/x64/bin make
          cd lib/reverseProxy
          ./update-def.sh
          cd ../..
          mkdir -p ${{ matrix.qt_arch }}/cui
          cp $PWD/output/bass/lib/windows/${{ matrix.GOARCH }}/bass.dll $PWD/${{ matrix.qt_arch }}/cui/
          cp $PWD/output/bass/lib/windows/${{ matrix.GOARCH }}/plugins/*.dll $PWD/${{ matrix.qt_arch }}/cui/
          cp $PWD/cmd/hannah/hannah.exe $PWD/${{ matrix.qt_arch }}/cui/
          cp $PWD/cmd/reverseProxy/rp.exe $PWD/${{ matrix.qt_arch }}/cui/

      - name: Build Reverse Proxy Library
        shell: cmd
        env:
          vc_arch: ${{ matrix.msvc_arch }}
          mingw_arch: ${{ matrix.mingw_arch }}
        run: |
          cd lib\reverseProxy
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %vc_arch%
          set PATH=D:\a\_temp\msys\msys64\%mingw_arch%\bin;%PATH%;C:\hostedtoolcache\windows\go\${{ env.go_version }}\x64\bin
          call ${{ matrix.BUILDRP }}
          cd ..\..

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ env.qt_ver }}
          target: ${{ env.qt_target }}
          arch: ${{ matrix.qt_arch }}
          host: 'windows'
          install-deps: 'true'

      - name: Build GUI executables
        shell: cmd
        env:
          vc_arch: ${{ matrix.msvc_arch }}
        run: |
          mkdir -p ${{ matrix.qt_arch }}\gui
          mkdir build
          cd build
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %vc_arch%
          qmake -r CONFIG+=release ..
          mkdir -p desktop\release\translations
          nmake
          copy desktop\release\Hannah.exe ..\${{ matrix.qt_arch }}\gui\
          windeployqt.exe ..\${{ matrix.qt_arch }}\gui\Hannah.exe
          copy registerProtocolHandler\release\registerProtocolHandler.exe ..\${{ matrix.qt_arch }}\gui\
          copy ..\lib\reverseProxy\*.dll ..\${{ matrix.qt_arch }}\gui\
          cd ..

      - shell: msys2 {0} 
        run : |   
          cp -r $PWD/build/desktop/release/translations $PWD/${{ matrix.qt_arch }}/gui/

      - name: package Chrome extension
        shell: msys2 {0}
        run: |
          cd $PWD/browser/chrome
          zip $PWD/../../${{ matrix.qt_arch }}/hannah-chrome-extension.crx ./*
          cd $PWD/../..

      - name: package Firefox extension
        shell: msys2 {0}
        run: |
          cd $PWD/browser/firefox
          zip $PWD/../../${{ matrix.qt_arch }}/hannah-firefox-addon.xpi ./*
          cd $PWD/../..
          
      - name: Upload artifact hannah-${{ matrix.qt_arch }}
        uses: actions/upload-artifact@v1.0.0
        with:
          name: hannah-${{ matrix.qt_arch }}
          path: ${{ matrix.qt_arch }}

  Windows-MSVC-clang:
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - qt_arch: win64_msvc2019_64
            mingw_arch: MINGW64
            mingw_prefix: mingw-w64-x86_64
            toolchains: gcc
            GOARCH: amd64
            BUILDRP: build-x64.bat
            msvc_arch: x64
            clang_link: https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.0/LLVM-11.0.0-win64.exe
          - qt_arch: win32_msvc2019
            mingw_arch: MINGW32
            mingw_prefix: mingw-w64-i686
            toolchains: gcc
            GOARCH: 386
            BUILDRP: build-x86.bat
            msvc_arch: x86
            clang_link: https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.0/LLVM-11.0.0-win32.exe
    env:
      go_version: 1.15.7
      qt_ver: 5.15.2
      qt_target: desktop
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: ${{ matrix.mingw_arch }}
          install: zip make git ${{ matrix.mingw_prefix }}-${{ matrix.toolchains }} ${{ matrix.mingw_prefix }}-make ${{ matrix.mingw_prefix }}-zstd

      - name: Set up Go 1.15
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.go_version }}
        id: go
        
      - run: go version && go env

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          ref: ${{ github.head_ref }}

      - name: Set up clang for Windows
        shell: cmd
        run: |
          mkdir llvm
          cd llvm
          curl.exe -o LLVM.exe -L ${{ matrix.clang_link }}
          7z.exe x LLVM.exe
          cd ..

      - name: Build Go executables
        shell: msys2 {0}
        run: |
          env GOARCH=${{ matrix.GOARCH }} PATH=$PATH:/${{ matrix.mingw_arch }}/bin:/C/hostedtoolcache/windows/go/${{ env.go_version }}/x64/bin make
          cd lib/reverseProxy
          ./update-def.sh
          cd ../..
          mkdir -p ${{ matrix.qt_arch }}/cui
          cp $PWD/output/bass/lib/windows/${{ matrix.GOARCH }}/bass.dll $PWD/${{ matrix.qt_arch }}/cui/
          cp $PWD/output/bass/lib/windows/${{ matrix.GOARCH }}/plugins/*.dll $PWD/${{ matrix.qt_arch }}/cui/
          cp $PWD/cmd/hannah/hannah.exe $PWD/${{ matrix.qt_arch }}/cui/
          cp $PWD/cmd/reverseProxy/rp.exe $PWD/${{ matrix.qt_arch }}/cui/

      - name: Build Reverse Proxy Library
        shell: cmd
        env:
          vc_arch: ${{ matrix.msvc_arch }}
          mingw_arch: ${{ matrix.mingw_arch }}
        run: |
          cd lib\reverseProxy
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %vc_arch%
          set PATH=D:\a\_temp\msys\msys64\%mingw_arch%\bin;%PATH%;C:\hostedtoolcache\windows\go\${{ env.go_version }}\x64\bin
          call ${{ matrix.BUILDRP }}
          cd ..\..

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ env.qt_ver }}
          target: ${{ env.qt_target }}
          arch: ${{ matrix.qt_arch }}
          host: 'windows'
          install-deps: 'true'

      - name: Build GUI executables
        shell: cmd
        env:
          vc_arch: ${{ matrix.msvc_arch }}
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %vc_arch%
          set PATH=%PATH%;%CD%\llvm\bin
          path
          dir
          dir %CD%\llvm
          dir %CD%\llvm\bin
          mkdir -p ${{ matrix.qt_arch }}\gui
          mkdir build
          cd build
          qmake -r CONFIG+=release -spec win32-clang-msvc ..
          mkdir -p desktop\release\translations
          nmake
          copy desktop\release\Hannah.exe ..\${{ matrix.qt_arch }}\gui\
          windeployqt.exe ..\${{ matrix.qt_arch }}\gui\Hannah.exe
          copy registerProtocolHandler\release\registerProtocolHandler.exe ..\${{ matrix.qt_arch }}\gui\
          copy ..\lib\reverseProxy\*.dll ..\${{ matrix.qt_arch }}\gui\
          cd ..

      - shell: msys2 {0}
        run : |
          cp -r $PWD/build/desktop/release/translations $PWD/${{ matrix.qt_arch }}/gui/

      - name: package Chrome extension
        shell: msys2 {0}
        run: |
          cd $PWD/browser/chrome
          zip $PWD/../../${{ matrix.qt_arch }}/hannah-chrome-extension.crx ./*
          cd $PWD/../..

      - name: package Firefox extension
        shell: msys2 {0}
        run: |
          cd $PWD/browser/firefox
          zip $PWD/../../${{ matrix.qt_arch }}/hannah-firefox-addon.xpi ./*
          cd $PWD/../..

      - name: Upload artifact hannah-${{ matrix.qt_arch }}
        uses: actions/upload-artifact@v1.0.0
        with:
          name: hannah-${{ matrix.qt_arch }}-clang
          path: ${{ matrix.qt_arch }}

  Windows-MinGW:
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - qt_arch: mingw64_qt5-static-gcc
            mingw_arch: MINGW64 
            mingw_prefix: mingw-w64-x86_64
            toolchains: gcc
            mkspec: win32-g++
            qt_build: qt5-static
            qmake: /mingw64/qt5-static/bin/qmake.exe
            windeployqt: ls.exe
            GOARCH: amd64
          - qt_arch: mingw32_qt5-static-gcc
            mingw_arch: MINGW32
            mingw_prefix: mingw-w64-i686
            toolchains: gcc
            mkspec: win32-g++
            qt_build: qt5-static
            qmake: /mingw32/qt5-static/bin/qmake.exe
            windeployqt: ls.exe
            GOARCH: 386
          - qt_arch: mingw64_qt5-gcc
            mingw_arch: MINGW64 
            mingw_prefix: mingw-w64-x86_64
            toolchains: gcc
            mkspec: win32-g++
            qt_build: qt5
            qmake: qmake.exe
            windeployqt: windeployqt.exe
            GOARCH: amd64
          - qt_arch: mingw32_qt5-gcc
            mingw_arch: MINGW32
            mingw_prefix: mingw-w64-i686
            toolchains: gcc
            mkspec: win32-g++
            qt_build: qt5
            qmake: qmake.exe
            windeployqt: windeployqt.exe
            GOARCH: 386
          - qt_arch: mingw64_qt5-clang
            mingw_arch: MINGW64 
            mingw_prefix: mingw-w64-x86_64
            toolchains: clang
            mkspec: win32-clang-g++
            qt_build: qt5
            qmake: qmake.exe
            windeployqt: windeployqt.exe
            GOARCH: amd64
          - qt_arch: mingw32_qt5-clang
            mingw_arch: MINGW32
            mingw_prefix: mingw-w64-i686
            toolchains: clang
            mkspec: win32-clang-g++
            qt_build: qt5
            qmake: qmake.exe
            windeployqt: windeployqt.exe
            GOARCH: 386
    env:
      go_version: 1.15.8
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: ${{ matrix.mingw_arch }}
          install: zip make git ${{ matrix.mingw_prefix }}-${{ matrix.toolchains }} ${{ matrix.mingw_prefix }}-make ${{ matrix.mingw_prefix }}-${{ matrix.qt_build }} ${{ matrix.mingw_prefix }}-openssl ${{ matrix.mingw_prefix }}-zstd

      - name: Set up Go 1.15
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.go_version }}
        id: go

      - run: go version && go env

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          ref: ${{ github.head_ref }}

      - name: Build Go executables
        shell: msys2 {0}
        run: |
          env GOARCH=${{ matrix.GOARCH }} PATH=$PATH:/${{ matrix.mingw_arch }}/bin:/C/hostedtoolcache/windows/go/${{ env.go_version }}/x64/bin make
          mkdir -p ${{ matrix.mingw_prefix }}/cui
          cp $PWD/output/bass/lib/windows/${{ matrix.GOARCH }}/bass.dll $PWD/${{ matrix.mingw_prefix }}/cui/
          cp $PWD/output/bass/lib/windows/${{ matrix.GOARCH }}/plugins/*.dll $PWD/${{ matrix.mingw_prefix }}/cui/
          cp $PWD/cmd/hannah/hannah.exe $PWD/${{ matrix.mingw_prefix }}/cui/
          cp $PWD/cmd/reverseProxy/rp.exe $PWD/${{ matrix.mingw_prefix }}/cui/

      - name: Build GUI executables
        shell: msys2 {0}
        run: |
          mkdir -p $PWD/${{ matrix.mingw_prefix }}/gui
          mkdir build
          cd build
          env PATH=$PATH:/${{ matrix.mingw_arch }}/bin ${{ matrix.qmake }} -r CONFIG+=release ..
          mkdir -p $PWD/desktop/release/translations
          env PATH=$PATH:/${{ matrix.mingw_arch }}/bin /${{ matrix.mingw_arch }}/bin/mingw32-make.exe -j $NUMBER_OF_PROCESSORS
          cp $PWD/desktop/release/Hannah.exe $PWD/../${{ matrix.mingw_prefix }}/gui/
          cp -r $PWD/desktop/release/translations $PWD/../${{ matrix.mingw_prefix }}/gui/
          ${{ matrix.windeployqt }} $PWD/../${{ matrix.mingw_prefix }}/gui/Hannah.exe
          cp $PWD/registerProtocolHandler/release/registerProtocolHandler.exe $PWD/../${{ matrix.mingw_prefix }}/gui/
          cd ..

      - name: package Chrome extension
        shell: msys2 {0}
        run: |
          cd $PWD/browser/chrome
          zip $PWD/../../${{ matrix.mingw_prefix }}/hannah-chrome-extension.crx ./*
          cd $PWD/../..

      - name: package Firefox extension
        shell: msys2 {0}
        run: |
          cd $PWD/browser/firefox
          zip $PWD/../../${{ matrix.mingw_prefix }}/hannah-firefox-addon.xpi ./*
          cd $PWD/../..
          
      - name: Upload artifact hannah-${{ matrix.mingw_prefix }}
        uses: actions/upload-artifact@v1.0.0
        with:
          name: hannah-${{ matrix.qt_arch }}
          path: ${{ matrix.mingw_prefix }}

  Darwin:
    runs-on: macos-latest
    strategy:
      matrix:
        qt_ver: [5.15.2]
        qt_target: [desktop]
        qt_arch: [clang_64]
    steps:
      - name: Set up Go 1.15
        uses: actions/setup-go@v2
        with:
          go-version: 1.15
        id: go

      - run: go version && go env

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Build Go executables
        run: |
          brew install pkg-config
          make
          install_name_tool -change @executable_path/../../output/bass/lib/darwin/amd64/libbass.dylib @executable_path/libbass.dylib cmd/hannah/hannah
          mkdir darwin-amd64
          mv $PWD/cmd/hannah/hannah darwin-amd64/
          cp $PWD/output/bass/lib/darwin/amd64/libbass.dylib darwin-amd64/
          cp $PWD/output/bass/lib/darwin/amd64/plugins/*.dylib darwin-amd64/
          mv $PWD/cmd/reverseProxy/rp darwin-amd64/

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.qt_ver }}
          target: ${{ matrix.qt_target }}
          arch: ${{ matrix.qt_arch }}

      - name: build macos
        run: |
          cd desktop
          mkdir build
          cd build
          qmake -r CONFIG+=release CONFIG+=qtquickcompiler ..
          make -j `sysctl -n hw.logicalcpu`
          cd ..
      
      - name: package desktop
        run: |
          macdeployqt "desktop/build/Hannah.app" -qmldir=. -verbose=1 -dmg
          cp desktop/build/Hannah.dmg darwin-amd64/

      - name: package Chrome extension
        run: |
          cd browser/chrome
          zip ../../darwin-amd64/hannah.crx ./*
          cd ../..

      - name: package Firefox extension
        run: |
          cd browser/firefox
          zip ../../darwin-amd64/hannah.xpi ./*
          cd ../..

      - name: Upload artifact hannah-darwin-amd64
        uses: actions/upload-artifact@v1.0.0
        with:
          name: hannah-darwin-amd64
          path: darwin-amd64
